设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。
push(x) -- 将元素 x 推入栈中。
pop() -- 删除栈顶的元素。
top() -- 获取栈顶元素。
getMin() -- 检索栈中的最小元素。

class MinStack {
public:
    /** initialize your data structure here. */
    MinStack() {
        
    }
    
    void push(int x) {
        if(st.empty()||x<=minst.top())
        {
            minst.push(x);
        }
        st.push(x);
        
    }
    
    void pop() {
        if(st.top()==minst.top())
        {
            minst.pop();
        }
        st.pop();
        
        
    }
    
    int top() {
        return st.top();
    }
    
    int getMin() {
        return minst.top();
    }
    private:
    stack<int>st;
    stack<int>minst;
};

输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。
假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，
但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等）。
/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

class Solution {
public:
    bool IsPopOrder(vector<int> pushV,vector<int> popV) {
       stack<int> st;
        int pushi=0;
        int popi=0;
        for(pushi=0;pushi<pushV.size();pushi++)
        {
            st.push(pushV[pushi]);
            while(!st.empty()&&popV[popi]==st.top())
            {
                    st.pop();
                    popi++;
           }
        }
        if(st.empty())
            return true;
        return false;
    }
};

用两个栈实现一个队列
class MyQueue {
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        pst.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {

        if(!qst.empty())
        {
            int i=qst.top();
            qst.pop();
            return i;
        }
        else
        {
            while(!pst.empty())
            {
                qst.push(pst.top());
                pst.pop();
            }
            int i=qst.top();
            qst.pop();
            return i;
        }
        
    }
    
    /** Get the front element. */
    int peek() {

        if(qst.empty())
        {
            while(!pst.empty())
            {
                qst.push(pst.top());
                pst.pop();
            }
        }
        return qst.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
    if(qst.empty()&&pst.empty())
        return true;
        return false;
    }
    private:
    stack<int>pst;
    stack<int>qst;
};

逆波兰表达式
根据逆波兰表示法，求表达式的值。
有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。
说明：
整数除法只保留整数部分。
给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
      stack<int> q;
        for(int i=0;i<tokens.size();i++)
        {
            if(tokens[i]=="+")
            {
                
                int right=q.top();
                q.pop();
                int left=q.top();
                       q.pop();
                q.push(left+right);
            }
            else if(tokens[i]=="-")
            {
                int right=q.top();
                q.pop();
                int left=q.top();
                q.pop();
                q.push(left-right);
            }
            else if(tokens[i]=="*")
            {
                int right=q.top();
                q.pop();
                int left=q.top();
                q.pop();
                    q.push(left*right);
            }
            else if(tokens[i]=="/")
            {
                int right=q.top();
                q.pop();
                int left=q.top();
                q.pop();
                  q.push(left/right);
            }
            else
            {
                int j=atoi(tokens[i].c_str());
                q.push(j);
            }

        }
             return q.top();
    }
};


给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。
百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”
例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool getpath(TreeNode* root,TreeNode* q,stack<TreeNode*>& pst)
    {
        if(root==NULL)
            return false;
        pst.push(root);
        if(root==q)
        {
            return true;
        }
        if(getpath( root->left,q,pst))
        {
            return true;
        }
        if(getpath( root->right,q,pst))
           {
               return true;
            }
        pst.pop();
           return false;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        stack<TreeNode*>qst;
        stack<TreeNode*>pst;
        getpath( root,q,qst);
        cout<<qst.size()<<endl;
        getpath( root,p,pst);
         cout<<pst.size()<<endl;

        while(qst.size()!=pst.size())
        {
            if(qst.size()>pst.size())
            {
                qst.pop();
            }
            else
            {
                pst.pop();
            }
        }
        while(qst.top()!=pst.top())
        {
            qst.pop();
            pst.pop();
        }
        return pst.top();
    }
};

二叉树的层序遍历
给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。
例如:
给定二叉树: [3,9,20,null,null,15,7],
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
 vector<vector<int>>vv;
        if(root==NULL)
            return vv;

        int sum=0;
        int level=1;
        queue<TreeNode*>q1;
        queue<TreeNode*>q2;
        q1.push(root);
        while(q1.size()!=0||q2.size()!=0)
        {
        if(q1.size()!=0)
        {
            vv.resize(level);
           
            while(q1.size()!=0)
            {
                
                if(q1.front()->left!=NULL)
                q2.push(q1.front()->left);
                if(q1.front()->right!=NULL)
                q2.push(q1.front()->right);
                vv[sum].push_back(q1.front()->val);
                q1.pop();
                
            }
            sum++;
            level++;
        }
        else
        { 
            vv.resize(level);

            while(q2.size()!=0)
            {
              if(q2.front()->left)
                q1.push(q2.front()->left);
            if(q2.front()->right)
                q1.push(q2.front()->right);
                vv[sum].push_back(q2.front()->val);
                q2.pop();
              
            }
            sum++;
           level++;
        }
        }
        return vv;
    }
};

二叉树的层序遍历的逆向
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
         vector<vector<int>>vv;
        if(root==NULL)
            return vv;
        queue<TreeNode*>node;
        queue<int> index;
       int flag=1;
        int level=1;
        node.push(root);
        index.push(level);
        while(!node.empty())
        { 
            flag=index.front();
            vv.resize(level);
            vv[index.front()-1].push_back(node.front()->val);
            if(node.front()->left)
            {
                node.push(node.front()->left);
                index.push(index.front()+1);
            }
            if(node.front()->right)
            {
                node.push(node.front()->right);
                 index.push(index.front()+1);
            }
            node.pop();
            index.pop();
            if(flag!=index.front())
            level++;
                  
        }
      reverse(vv.begin(),vv.end());

        return vv;
    }
};

二叉树的层平均值
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> vd;
   
        if(root==NULL)
            return vd;

        queue<TreeNode*>q1;
        queue<TreeNode*>q2;
        q1.push(root);
        //if(q1.front()->left)
            //cout<<1;
       // cout<<(q1.front()->val)<<endl;
        while(!q1.empty()||!q2.empty())
        {
            int tmp=0;
            double sum=0;
            while(!q1.empty())
            {
            
                if(q1.front()->left)
                q2.push(q1.front()->left);
                if(q1.front()->right)
                    q2.push(q1.front()->right);
                tmp++;
                sum+=q1.front()->val;
                q1.pop();
            }
            if(tmp)
                vd.push_back(sum/tmp);
            
            tmp=0;
            sum=0;
            while(!q2.empty())
            {
           
                if(q2.front()->left)
                q1.push(q2.front()->left);
                if(q2.front()->right)
                    q1.push(q2.front()->right);
                tmp++;
                sum+=q2.front()->val;
                q2.pop();
            }
            if(tmp)
                vd.push_back(sum/tmp);
        }
        return vd;
    }
};

二叉树的镜像

struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    void Mirror(TreeNode *pRoot) {
      if(pRoot==NULL)
          return ;
        swap(pRoot->left,pRoot->right);
        Mirror(pRoot->left);
        Mirror(pRoot->right);
        
    }
};

二叉树得层序遍历
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>>vv;
       if(root==NULL)
           return vv;
        queue<Node*> q;
        q.push(root);
        while(!q.empty())
        {
           
            vector<int> tmp;
            int len=q.size();
            for(int i=0;i<len;i++)
            {
                Node* t=q.front();
                q.pop();
                tmp.push_back(t->val);
                for(int j=0;j<t->children.size();j++)
                {
                   q.push(t->children[j]);
                }
            }
            vv.push_back(tmp);
            
        }
                          return vv;
    }
};

二叉树得前序遍历（非递归）
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
   /* void _preorderTraversal(TreeNode* root,vector<int>& v)
    {
        if(root==NULL)
            return ;
        v.push_back(root->val);
        _preorderTraversal(root->left,v);
        
        _preorderTraversal(root->right,v);           
    }*/
    
    vector<int> preorderTraversal(TreeNode* root) {
        /*vector<int>v;
        
         _preorderTraversal(root,v);    
        return v;*/
        vector<int>v;
        if(root==NULL)
            return v;
        stack<TreeNode*> st;
        while(root!=NULL)
        {
            v.push_back(root->val);
            if(root->left!=NULL)
            {
                if(root->right!=NULL)
                {
                    st.push(root->right);
                    
                }
                root=root->left;
                continue;
            }
            if(root->right!=NULL)
            {
                root=root->right;
                continue;
            }
            
            if(!st.empty())
            {
                root=st.top();
                st.pop();
                continue;
            }
            break;
        }
 
        return v;
    }
};

二叉树得中序遍历（非递归）
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>v;
        stack<TreeNode*>st;
        while(root||!st.empty())
        {
           while(root!=NULL)
           {
               st.push(root);
               root=root->left;
            }
            root=st.top();
            st.pop();
            v.push_back(root->val);
            
            root=root->right;
        }
       
    return v;
    }
};

二叉树得后序遍历（非递归）

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {

        vector<int>v;
        if(root==NULL)
            return v;
        stack<TreeNode*>st;
        st.push(root);
        while(st.size())
        {
            TreeNode* tmp=st.top();
            st.pop();
            v.insert(v.begin(),tmp->val);
            if(tmp->left)
            {
                st.push(tmp->left);
                
            }
            if(tmp->right)
            {
                st.push(tmp->right);
            }
            
        }
        return v;

    }
};